{"version":3,"sources":["screens/Experience.js","screens/Projects.js","screens/AboutMe.js","screens/Resume.js","screens/References.js","screens/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Experience","react_default","a","createElement","Projects","AboutMe","Header","Resume","References","Contact","App","className","Grid","fluid","rows","columns","style","marginTop","Row","Column","Message","as","textAlign","Tab","menu","fixed","widths","size","inverted","panes","menuItem","Menu","Item","key","Icon","name","render","screens_AboutMe","screens_Projects","screens_Experience","screens_Resume","screens_References","screens_Contact","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAUeA,UARI,WACf,OACIC,EAAAC,EAAAC,cAAA,cCMOC,EARE,WACb,OACIH,EAAAC,EAAAC,cAAA,aCUOE,EARC,WACZ,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACG,EAAA,EAAD,qBCCGC,EARA,WACX,OACIN,EAAAC,EAAAC,cAAA,aCMOK,EARI,WACf,OACIP,EAAAC,EAAAC,cAAA,aCMOM,EARC,WACZ,OACIR,EAAAC,EAAAC,cAAA,aCgFOO,mLAxEP,OACIT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACXV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,OAAK,EAACC,KAAM,EAAGC,QAAS,EAAGC,MAAO,CAACC,UAAW,QAChDhB,EAAAC,EAAAC,cAACS,EAAA,EAAKM,IAAN,MACAjB,EAAAC,EAAAC,cAACS,EAAA,EAAKM,IAAN,KACIjB,EAAAC,EAAAC,cAACS,EAAA,EAAKO,OAAN,MACAlB,EAAAC,EAAAC,cAACS,EAAA,EAAKO,OAAN,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAST,UAAU,yBACfV,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQe,GAAG,KAAKC,UAAU,SAAST,OAAK,GAAxC,aACAZ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQe,GAAG,KAAKC,UAAU,SAAST,OAAK,GAAxC,wCAGRZ,EAAAC,EAAAC,cAACS,EAAA,EAAKO,OAAN,OAEJlB,EAAAC,EAAAC,cAACS,EAAA,EAAKM,IAAN,OAEJjB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAKC,KAAM,CAACC,MAAO,MAAOC,OAAQ,EAAGC,KAAM,QAASC,UAAU,GAAQN,UAAU,SAC5EO,MAAO,CAAC,CACJC,SACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAKC,KAAN,CAAWC,IAAK,GAAGhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,KAAK,wBAA9B,YACJC,OAAQ,WACJ,OACInC,EAAAC,EAAAC,cAACkC,EAAD,QAGV,CACEP,SACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAKC,KAAN,CAAWC,IAAK,GAAGhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,KAAK,WAA9B,YACJC,OAAQ,WACJ,OACInC,EAAAC,EAAAC,cAACmC,EAAD,QAGV,CACER,SACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAKC,KAAN,CAAWC,IAAK,GAAGhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,KAAK,aAA9B,cACJC,OAAQ,WACJ,OACInC,EAAAC,EAAAC,cAACoC,EAAD,QAGV,CACET,SACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAKC,KAAN,CAAWC,IAAK,GAAGhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,KAAK,2BAA9B,UACJC,OAAQ,WACJ,OACInC,EAAAC,EAAAC,cAACqC,EAAD,QAGV,CACEV,SACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAKC,KAAN,CAAWC,IAAK,GAAGhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,KAAK,UAA9B,cACJC,OAAQ,WACJ,OACInC,EAAAC,EAAAC,cAACsC,EAAD,QAGV,CACEX,SACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAKC,KAAN,CAAWC,IAAK,GAAGhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,KAAK,mBAA9B,WACJC,OAAQ,WACJ,OACInC,EAAAC,EAAAC,cAACuC,EAAD,mBAhEdC,oBCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASb,OAAOnC,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3a310b87.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Experience = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Experience;","import React from 'react';\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Projects;","import React from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\n\r\n/*\r\nPut your picture, your name, your current status, and your elevator pitch\r\n */\r\nconst AboutMe = () => {\r\n    return (\r\n        <div>\r\n            <Header> ABOUT ME </Header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AboutMe;","import React from 'react';\r\n\r\nconst Resume = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Resume;","import React from 'react';\r\n\r\nconst References = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default References;","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React, { Component } from 'react';\nimport { Message, Segment, Header, Grid, Tab, Icon, Menu } from \"semantic-ui-react\";\nimport './App.css';\nimport Experience from \"./screens/Experience\";\nimport Projects from \"./screens/Projects\";\nimport AboutMe from \"./screens/AboutMe\";\nimport Resume from \"./screens/Resume\";\nimport References from \"./screens/References\";\nimport Contact from \"./screens/Contact\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Grid fluid rows={3} columns={3} style={{marginTop: \"0px\"}}>\n                    <Grid.Row/>\n                    <Grid.Row>\n                        <Grid.Column/>\n                        <Grid.Column>\n                            <Message className=\"u-bg--primaryGradient\">\n                                <Header as=\"h2\" textAlign=\"center\" fluid>Leo Belyi</Header>\n                                <Header as=\"h4\" textAlign=\"center\" fluid>Software Engineer and Entrepreneur</Header>\n                            </Message>\n                        </Grid.Column>\n                        <Grid.Column/>\n                    </Grid.Row>\n                    <Grid.Row/>\n                </Grid>\n                <Tab menu={{fixed: \"top\", widths: 6, size: \"large\", inverted: false}} textAlign=\"center\"\n                    panes={[{\n                        menuItem:\n                            <Menu.Item key={0}><Icon name=\"user circle outline\"/>About Me</Menu.Item>,\n                        render: () => {\n                            return (\n                                <AboutMe/>\n                            );\n                        }\n                    },{\n                        menuItem:\n                            <Menu.Item key={0}><Icon name=\"laptop\"/>Projects</Menu.Item>,\n                        render: () => {\n                            return (\n                                <Projects/>\n                            );\n                        }\n                    },{\n                        menuItem:\n                            <Menu.Item key={0}><Icon name=\"suitcase\"/>Experience</Menu.Item>,\n                        render: () => {\n                            return (\n                                <Experience/>\n                            );\n                        }\n                    },{\n                        menuItem:\n                            <Menu.Item key={0}><Icon name=\"file alternate outline\"/>Resume</Menu.Item>,\n                        render: () => {\n                            return (\n                                <Resume/>\n                            );\n                        }\n                    },{\n                        menuItem:\n                            <Menu.Item key={0}><Icon name=\"group\"/>References</Menu.Item>,\n                        render: () => {\n                            return (\n                                <References/>\n                            );\n                        }\n                    },{\n                        menuItem:\n                            <Menu.Item key={0}><Icon name=\"text telephone\"/>Contact</Menu.Item>,\n                        render: () => {\n                            return (\n                                <Contact/>\n                            );\n                        }\n                    }]}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './semantic/dist/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}